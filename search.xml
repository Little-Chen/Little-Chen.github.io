<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[图解HTTP笔记]]></title>
    <url>%2F2018%2F03%2F23%2F%E5%9B%BE%E8%A7%A3HTTP%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[一、基础概念1.1 http协议，即超文本传输协议。为TCP/IP的一个子集。 TCP/IP协议族：包含HTTP协议。 TCP/IP的分层管理： 应用层：预存了各类应用服务，如：FTP、DNS 传输层：提供了计算机间的数据传输，如：TCP、UDP 网络层：处理网络上流动的数据包（数据的最小单位） 数据链路层：处理网络连接的硬件部分。 TCP/IP通信流程 发送客户端在应用层发出查看请求，传输层将接受到的数据（请求报文）进行分割，并以此标序后发给网络层。在网络层增加通信目的地的MAC地址后发送给链路层。 接收端在链路层收到数据，按照序号向上层发送，最终抵达应用层，服务器得到请求。 发送端在每层传输时，都会逐层打上首部信息。接收端则依次删去。 这种数据信息包装的做法叫做封装！ 1.2 IP、TCP、DNS1.2.1 IP协议 IP协议处在网络层，功能是实现数据包的传送。确保数据送达的两个重要条件是： IP地址和MAC地址。 IP地址：节点被分配到的地址。（可变） MAC地址：网卡所属的固定地址。（固定） ARP：一种解析地址的协议。可以通过IP地址查询相应MAC地址。 整个通信过程其实经历了很多次随机中转，称为路由选择。1.2.2 TCP协议 TCP协议位于传输层，提供字节流服务，确保可靠性。 即把大段的数据分割成为有序报文段，成为一个个数据包进行管理，使传输更稳定，可以传输更大体量的数据。 此外，为确保数据送达，TCP协议建立连接进行了三次握手。 1.首先发送端发送具有SYN（同步）标志的数据包，表示请求连接。 2.接受端收到后，回传一个SYN和ACK（确认）的数据包，表示确认收到。 3.发送端收到后再发送一个标有SYN的数据包，代表“握手结束”，连接已确认建立。 断开连接进行了四次握手 1.客户端主动关闭连接时，发送一个FIN给服务端，终止连接。 2.服务端受到后，回传一个ACK（确认）数据包，确认关闭信息。 3.过一会儿，服务器关闭后，发送一个FIN给客户端表示关闭。 4.客户端收到FIN给服务器发送ACK，表示确认收到关闭信息。连接中断。 SYN：同步序号，是TCP建立连接时使用的握手信号ack：接收端给发送端的一种传输类控制字符，表示发来的数据已确认接收无误FIN：TCP终止时使用的挥手信号 1.2.3 DNS协议 DNS位于应用层，是一个分布式数据库。提供域名到IP的解析服务。 DNS协议提供域名查找IP地址，或者逆向查询的服务。 以上参考了文章：TCP连接的建立与终止过程text url 1.3 URL/URI URI/URL： 统一资源标识符/统一资源定位符【URL是URI的子集！】 URL ：就是我们常使用的Web浏览器访问页面所要输入的网页地址。 URI格式:http:// user:pass @www.example.jp:80 /dir/index.htm ?uid=1#ch112345678http:// ①协议方案名user:pass ②登录信息www.example.jp ③服务器地址（域名）80 ④服务器端口号dir/index.htm ⑤文件路径?uid=1 ⑥查询字符串ch1 ⑦片段标识符1、3、5是必须属性！ 二、简单的HTTP协议2.1 HTTP简单通信过程 请求访问资源的称为客户端，提供资源响应的称为服务端。 请求报文1234567GET / index.htm HTTP/1.1Host: hackr.jpConnection: keep-aliveContent-Type: application/x-www-form-urlencodedContent-Length: 16//空行name = ueno&amp;age=37 由请求访问服务器的类型方法，请求资源对象（request-URI），协议版本号，可选请求首部字段和内容实体构成。 响应报文1234567HTTP/1.1 200 OK Date: Tue , 10 jul 2012 06:50:15 GMTContent-Length: 362Content-Type: text/html//空行&lt;html&gt;... 由协议版本，状态码，状态码原因短语，响应首部字段和响应主体构成。 2.2 HTTP是无状态协议 HTTP是一种无状态协议：是为了更快速地处理大量事物，减少服务器资源消耗，确保协议可伸缩性而设计的。为了弥补无状态的缺点，引入了Cookie技术。 HTTP请求方法： GET：获取资源 POST：传输实体主体 PUT：传输文件（不带任何验证机制，不安全） HEAD：获取报文首部（通信状态）。 DELETE：删除文件 OPTION：询问支持的传输方法 TRACE：追踪路径 CONNECT：要求用隧道协议连接代理 等。。。 详见参考：http六种 请求方法 建立持久连接（HTTP keey-alive 或 HTTP connection reuse）保持TCP的状态。 管线化实现，并行发送多个请求，无需等待。 Cookie状态管理 通过在请求和响应报文中写入Cookie信息控制客户端状态。 响应报文返回一个Set-Cookie首部字段信息，保存在客户端。下次请求会自动添加到请求报文中发送。代码参见书P40]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS迭代器与循环]]></title>
    <url>%2F2018%2F03%2F19%2FJS%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[map、eval、for…in、for…of、forEach最早的数组遍历方式1234var a = ["a", "b", "c"];for(var index = 0;index &lt; a.length;index++)&#123; console.log(a[index]);&#125; map定义和方法map理解为“映射”的意思，基本用法同forEach，为ES5新增属性方法。❤map()方法返回一个新数组，数组中的元素为原始数组元素调用函数处理的后值。❤map()方法按照原始数组元素顺序依次处理元素。 注意：map不会对空数组进行检测map不会改变原始数组处理函数必须有返回值，否则会映射成undefined。map使用语法： 1arr.map(function(currentValue，index，arr),thisValue) 参数: 处理函数（必须），下属参数依次为：当前值value，序号index，原数组arr。 thisValue(可选) ❤另外，由于map方法为ES5新增方法，不支持IE9以下浏览器。如果需要兼容，可用原型扩展。方法如下： 1234567891011if (typeof Array.prototype.map != "function") &#123; Array.prototype.map = function (fn, context) &#123; var arr = []; if (typeof fn === "function") &#123; for (var k = 0, length = this.length; k &lt; length; k++) &#123; arr.push(fn.call(context, this[k], k, this)); &#125; &#125; return arr; &#125;;&#125; jquery中map方法用法同原生且从 1.6 开始，该函数也支持遍历对象。它接受两个参数，分别是要处理的数组/对象和处理函数，其处理函数也接受键值和键名两个参数。 123456789101112131415161718192021222324252627/**** jQuery $.map() ****/// 筛选数组元素var arrTmp = [1,2,3,4,5];var bigNum = $.map(arrTmp,function(num)&#123; if(num&gt;2)&#123; return num; &#125;&#125;);// bigNum -&gt; [3,4,5]// 处理对象var person = &#123; jack:&#123;age:9&#125;, tom:&#123;age:20&#125;, bobo:&#123;age:30&#125;&#125;var oldMan = $.map(person,function(value,key)&#123; if(value.age&gt;26)&#123; return key; &#125;&#125;)// oldMan -&gt; ["bobo"] eval eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。 注意：strong text该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。例子： 12345678910&lt;script type="text/javascript"&gt;eval("x=10;y=20;document.write(x*y)")document.write(eval("2+2"))var x=10document.write(eval(x+17))&lt;/script&gt; ###1 forEach语法： 1[].forEach(function(value, index, array) &#123; // ... &#125;); forEach遍历数组，而不是遍历对象哦，而且在遍历的过程中不能被终止,必须每一个值遍历一遍后才能停下来.也就是说：你不能使用break来退出循环, 不能使用return语句来返回到外层 jquery中forEach注意其与jQuery的$.each类似，只不过参数正好是相反的！ 1$.each([], function(index, value, array) &#123; // ... &#125;); 2 for…in适合进行普通对象的遍历 for-in循环遍历对象的key，即键值对的键名。 特性如下： 方法遍历到的index（或key）类型为String，若无意间进行了字符串计算，会带来许多不便。 for-in循环会遍历对象的所有可枚举属性。什么意思呢？就是除了遍历数组元素之外，还会遍历：自定义属性，原型上的属性。 一般不推荐遍历数组，因为for in遍历顺序是随机的，适合进行普通对象的遍历。 12345678910var myArry =[1,2,3,4];myArry.desc ='four'; for(var value in myArry)&#123; //循环key console.log(value)&#125;//"0"//"1"//"2"//"3"//"desc" 注意这里添加上去的属性也被遍历出来了 for…in由于历史遗留问题，它遍历的实际上是对象的属性名称，一个Array数据也是一个对象，数组中的每个元素的索引被视为属性名称，所以我们可以看到使用for…in循环Array数组时，拿到的其实是每个元素的索引. PS:若要避免原型链上的属性也被遍历到，可采用hasOwnProperty()方法去过滤掉对象原型链上的属性。 for…offor-of循环适合遍历数组 循环遍历对象的值，即键值对的键值。 123456789var myArry =[1,2,3,4];myArry.desc ='four';for(var value of myArry)&#123; console.log(value)&#125;//1//2//3//4 特性如下： 这是最简洁、最直接的遍历数组元素的语法。 这个方法避开了for-in循环的所有缺陷，解决了forEach的不可中断问题。 for…of为ES6新增方法。 不推荐for…of遍历普通对象，实在需要用for…of遍历，可搭配Object.keys()实现。 代码如下： 12345678910111213var student=&#123; name:'wujunchuan', age:22, locate:&#123; country:'china', city:'xiamen', school:'XMUT' &#125;&#125;for(var key of Object.keys(student))&#123; //使用Object.keys()方法获取对象key的数组 console.log(key+": "+student[key]);&#125; 总结：for…in与for…of格式对比： 1234567for (var key in arr)&#123; console.log(arr[key]);&#125;for (var value of arr)&#123; console.log(value);&#125; 推荐在循环对象属性的时候，使用for…in,在遍历数组的时候的时候使用for…of。 for in是遍历键名，for of是遍历键值。 注意，for…of是ES6新引入的特性。修复了ES5引入的for…in的不足。 参考文章：forEach/for…in/for…of迭代器与for…of循环]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML基础笔记]]></title>
    <url>%2F2018%2F03%2F09%2FHTML%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[html基础笔记命名规范HTML是什么？◾超文本标记语言（Hypertext Markup Language，HTML）通过标签语言来标记要显示的网页中的各个部分。一套规则，浏览器认识的规则。 HTML结构 ◾&lt;!DOCTYPE html&gt; 告诉浏览器使用什么样的html或者xhtml来解析html文档作用：声明文档的解析类型(document.compatMode)，避免浏览器的怪异模式。◾&lt;html&gt;&lt;/html&gt;是文档的开始标记和结束标记。此元素告诉浏览器其自身是一个 HTML 文档，在它们之间是文档的头部&lt;head&gt;和主体&lt;body&gt;。◾&lt;head&gt;&lt;/head&gt;元素出现在文档的开头部分。&lt;head&gt;与&lt;/head&gt;之间的内容不会在浏览器的文档窗口显示，但是其间的元素有特殊重要的意义。◾&lt;title&gt;&lt;/title&gt;定义网页标题，在浏览器标题栏显示。◾&lt;body&gt;&lt;/body&gt;之间的文本是可见的网页主体内容 2017.10.30一、div布局基础 网页分层： 表现层 css 结构层 html 行为层 JS meta标签:关键字内容，提供网站相关信息给搜索引擎。常用作：提高排名，SEO（搜索引擎优化）权重 &lt;meta&gt;元素可提供有关页面的元信息（meta-information），针对搜索引擎和更新频度的描述和关键词 charset字符集编码方式 常用标签 p标签段落标签！ h1-h6标签h1：logo主标题！h2：区块标题！h3-h6依次向下。不要滥用h标签！ sub、sup下标上标 &lt;br/&gt;换行 &lt;hr/&gt;水平线 &lt;i&gt;斜体标签（&lt;em&gt;效果相同） &lt;b&gt;粗体文本 &lt;strong&gt;加粗&lt;strong&gt;标签和&lt;em&gt;标签一样，用于强调文本，但它强调的程度更强一些。不能滥用强调标签！ 有序列表：&lt;ol&gt;&lt;li&gt;嵌套 无序列表：&lt;ul&gt;&lt;li&gt;嵌套 常见属性用法： 1234&lt;ol type=&quot;1&quot; start=&quot;10&quot;&gt; &lt;li&gt;asd&lt;/li&gt;&lt;/ol&gt; //以数字为序号的，从10开始的有序列表 123456&lt;ul type=&quot;circle&quot;&gt; &lt;li&gt;123&lt;/li&gt; &lt;li&gt;11&lt;/li&gt; &lt;li&gt;333&lt;/li&gt;&lt;/ul&gt; //无序列表（circle空心圆、disc实心圆、square正方块） 自定义列表：&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;嵌套使用 -`&lt;dt&gt;`标题 -`&lt;dd&gt;`列表项 &lt;img/&gt;图片标签1.src引入图片路径。2.alt替代文本，seo抓取关键字。3.title鼠标悬浮提示文字 background 简写属性在一个声明中设置所有的背景属性。可以设置如下属性： background-color //颜色 background-position //定位 background-size //大小 background-repeat //重复方式 background-origin background-clip background-attachment background-image //图片 ★★★★ background-attachment：fixed图片固定在窗口的固定位置。 &lt;a&gt;超链接标签 href属性：(1)填写域名跳转链接(2)填写下载或打开文件路径(3)填写#代表空链接 target属性窗口打开方式：(1)_self当前窗口跳转链接(2)_blank新窗口跳转链接 &lt;a&gt;做锚点：页面内指定节点跳转！1234567&lt;a href=&quot;#head&quot;&gt;点击跳转&lt;/a&gt;&lt;p id=&quot;head&quot;&gt;第一部分&lt;/p&gt;&lt;p&gt;第二部分&lt;/p&gt;&lt;p&gt;第三部分&lt;/p&gt;&lt;p&gt;第四部分&lt;/p&gt;//点击即可跳转到第一部分！ 扩展： 1234567//锚链接滑动跳转效果$(&apos;a&apos;).click(function() &#123; $(&apos;html, body&apos;).animate(&#123; scrollTop: $($.attr(this, &apos;href&apos;)).offset().top &#125;, 5000); return false;&#125;); css样式引入方式： 行内样式 1&lt;div style=&quot;width:100px;height:200px;&quot;&gt;盒子&lt;/div&gt; 内嵌式 1234 &lt;style&gt;#a&#123;样式&#125;;.b&#123;样式&#125;; &lt;/style&gt; 链接式在&lt;head&gt;&lt;/head&gt;内写入： 1&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt; 导入式（不建议使用）导入样式和链接样式比较相似，采用@import样式导入CSS样式表，在HTML初始化时，会被导入到HTML或者CSS文件中，成为文件的一部分，类似第二种内嵌样式。123&lt;style type=&quot;text/css&quot;&gt;@(培训)[标签1, 标签2, 标签3];&lt;/style&gt; 四种CSS引入方式的优先级 就近原则 理论上：行内&gt;内嵌&gt;链接&gt;导入 实际上：内嵌、链接、导入在同一个文件头部，谁离相应的代码近，谁的优先级高 color样式： 颜色或#xxxxxx rgb(x,x,x,x)前三个为三原色掺比0-255.最后一个为透明的，0-1。 浏览器默认给body加了一个8px的外边距 ul、ol列表默认也有边距 li默认有缩进 盒子的实际大小：自身高度+内边距+边框 盒子的占位空间：自身高度+内边距+边框+外边距 群组选择器：a,div, .box, .top{样式} 通配符选择器：全局选中！*{} 配置方便但是影响性能！（页面渲染时要遍历所有标签，大型网站开发不用） 类选择器：class 后代选择器：#box p display显示1.block块级元素！独占一行，可设置宽高。没有设置宽高时，继承父级宽高。可容纳其他块级元素和行内元素。 常见块级元素： address - 地址blockquote - 块引用center - 举中对齐块dir - 目录列表div - 常用块级容易，也是css layout的主要标签dl - 定义列表fieldset - form控制组form - 交互表单h1 - 大标题h2 - 副标题h3 - 3级标题h4 - 4级标题h5 - 5级标题h6 - 6级标题hr - 水平分隔线isindex - input promptmenu - 菜单列表noframes - frames可选内容（对于不支持frame的浏览器显示此区块内容）noscript - 可选脚本内容（对于不支持script的浏览器显示此内容）ol - 排序列表p - 段落pre - 格式化文本table - 表格ul - 非排序列表 2.inline内联元素！不可设置宽高可与其他元素同处一行只能容纳内联元素不支持设置上下内、外边距，可设置左右内、外边距。内联元素间有空格，就像文字间隙！ 如上，设置内边距时，元素内容位置不变，内边距会上下撑开，从而覆盖在其他元素上。 常见内联元素： a - 锚点abbr - 缩写acronym - 首字b - 粗体（不推荐）bdo - bidi overridebig - 大字体br - 换行cite - 引用code - 计算机代码（在引用源码的时候需要）dfn - 定义字段em - 强调font - 字体设定（不推荐）i - 斜体img - 图片input - 输入框kbd - 定义键盘文本label - 表格标签q - 短引用s - 中划线（不推荐）samp - 定义范例计算机代码select - 项目选择small - 小字体文本span - 常用内联容器，定义文本内区块strike - 中划线strong - 粗体强调sub - 下标sup - 上标textarea - 多行文本输入框tt - 电传文本u - 下划线var - 定义变量 ★★★★其中：img较为特殊。img元素作为替换元素，有着类似于Inline-block的行为！ 可以设置width/height; 默认的，img元素在屏幕占据的空间与其图片的实际像素一致 如果img标签的包裹元素为也为inline元素，则img的边界可以超出其直接父元素的边界，直到自己的宽、高达到最大或者设定值为止，而且文档流中img的兄弟元素也不能遮盖住img。最常见的就是&lt;a&gt;里面包含的&lt;img&gt; 可以通过text-alin：center实现居中！ 3.inline-block行内块级元素兼具块级元素与内联元素的特性 行内块级元素特性：※ margin：0 auto只对块级元素有效！且IE6、IE7不支持！※ text-align文字对齐方式1.left2.center3.right※行内块级元素作为文字解析，因此可以通过text-align：center来实现居中对齐。 外边距合并：当块级元素的外边距相遇时会发生合并，合并后的共同外边距以较大者为准。1.同级块级元素合并：合并后以较大者作为两者间距！2.父子块级元素合并：合并后以较大者作为此方向公共外边距。 解决边距合并方法：改变元素类型，使其不为块级元素。或者在元素间插入文字等其他元素。 ★★★★ p标签不能包p标签和块级元素。 a标签不能包a标签。可以包裹其它。 但是a标签无法完美包裹行内块级元素和块级元素，但是页面中常用这种包裹。因为这样做可以使整个div都可以点击访问，用户体验较好。 ★★★★ 垂直对齐方式vertical-align 只对行内或者行内块有效！ 基线表示： 行内元素和行内块元素对齐方式！1.行内块没有文字的时候，块底端默认以父级的基线（baseline）对齐！ 2.行内块有文字的时候，默认块的基线与父元素的基线对齐。 其他对齐方式： top 元素的顶端与父元素行高（不是高度）的顶端对齐 bottom 元素的底端与父元素行高底端对齐 middle 元素的中线与父元素行高中线对齐 text-top元素的顶端与父元素中文字顶线对齐 text-bottom元素的底端与父元素中文字底线对齐 文字对齐受行高影响，不受父元素盒子大小影响，行高若超过父盒子大小，内容则会溢出。 行高有继承效果！ HTML5 规范声明：应该使用 &lt;h1&gt; - &lt;h6&gt; 来表示标题，使用 &lt;em&gt; 标签来表示强调的文本，应该使用 &lt;strong&gt; 标签来表示重要文本，应该使用 &lt;mark&gt; 标签来表示标注的/突出显示的文本。 2017.11.16 鼠标指针 cursor 鼠标样式指针 pointer 手型 move 可移动指针 text 光标指示文本 wait 加载中 help 帮助 自定义指针 cursor：url（图片路径），pointer 透明度 opacity：整个盒子（包括其子元素）透明度变化 0-1。 background-color：rgb（255,0,0,0.5：最后一项只控制背景颜色的透明度。 rgb是css3的属性，IE一般不兼容 background-color在低版本的IE中不兼容 伪类选择器 .box：hover 2017.11.17 字体 font-family字体样式，包括微软雅黑，宋体，楷体等常见字体群 font-size字体大小 PS:一般浏览器默认样式为16px，火狐浏览器支持12px以下的字体大小，其他浏览器不支持12px以下的字体大小。 em做文字大小单位时，以父元素的文字大小为参考基准单位。 em做宽高时，以当前元素的字体大小做基准。 eg：浏览器默认字体大小16px，font-size：2em则字体大小为32px。width：10em则元素宽度为320px。 rem：以根标签html的字体大小作为基准。多用于移动端！ font-weight 字体粗细 取值：100-900或者normal、bold font-style字体风格。 italic字体倾斜 oblique强制倾斜 normal正常显示 ★★ font-wariant字体大小写 small-caps小写字母大写。 ★★★★ font的所有属性都会被继承 复合样式： ★★★★ text 文本 text-transform本文字母大小写 uppercase小写字母大写 lowercase大写字母小写 capitalize单词首字母大写 text-align文本水平对齐方式 right left center 行内元素无法使用！ text-indent文本段落缩进 px em 行内元素无法使用！ text-decoration本文修饰方式 underline下划线 line-through删除线 overline letter-spacing字符间距 单位：px word-spacing单词间距 单位：px white-space换行方式1. `normal`默认方式 2. `nowrap`不换行 word-breakcss3中换行方式 1. `normal`默认方式 2. `break-all`空间不足时，会拆分完整单词来换行。 3. `keep-all`空间不足，不会拆分单词，而是将其整体换到下一行。 4. `行内元素无法使用！` text-overflow文本超出设置 1. `clip` 文本超出 2. `ellipsis` 文本超出省略处理 3. 配合`overflow：hidden`使用，且`行内元素无法使用！` 特殊字符 浏览器会将多个空格当做一个空格处理。 &amp;nbsp； 空格占位符，一个代表一个空格。 &amp;lt；小于符号 &amp;gt；大于符号 &amp;copy；版权符号 reg； 注册商标 2017.11.18 ####高级选择器及a伪类 一、初级选择器 后代选择器 群组选择器★★★★ 子元素选择器：如div &gt; p直系父子才行。★★★★ 兄弟选择器：如：div + div 表示div的兄弟div元素。样式只加给相邻的兄弟，兄弟间不能有任何其他标签！且样式对元素自身无效，即自身不变！！！ 。 ★★★★一、属性选择器：元素拥有的任何属性（包括自定义属性）都可以作为选择的依据。 1. 如： `[class]`表示选中有class属性的元素 或[class=&quot;text&quot;]表示选中有class属性，且属性值唯一为text的元素。或[class=&quot;text-top&quot;]表示选中有class属性，且值唯一为text-top的元素。总结：可以灵活限定选择范围。 2. 如：`class ~=&quot;nav&quot;` ，表示选中具备`class属性`，且有一个（可有多个）为`nav`的值的元素。 3. 如：`[class |=&quot;nav&quot;]`,表示选中具备class属性，且有以nav或者nav-开头的值的元素。 4. **组合使用**：如 - `[href][titile=&quot;name&quot;]`表示选中具有href属性，且title属性值唯一为name的元素。 二、伪类选择器 a:hover鼠标悬停触发事件 a：link匹配所有没有被点击过的链接 a：visited匹配所有被点击过的链接 a：active匹配正在点击触发的链接 同理其他元素也可以应用以上伪类 ★★当a:hover和a：active同时存在的时候，顺序不能颠倒，否则active样式不生效。 三、伪元素选择器 p：after添加新元素到目标元素后面，默认生成的是行内元素。如：123456789101112131415元素！&lt;body&gt; &lt;p&gt;原来&lt;/p&gt;&lt;/body&gt;样式！&lt;style&gt;p&#123; font-size:30px; background-color: orange;&#125;p:after&#123; content:&quot;新增&quot;&#125;&lt;/style&gt; 结果如图： p：before添加新元素到目标元素前面，默认是行内元素。 ####四、应用和优先级讨论 单个选择器优先级 ID选择器&gt;类选择器&gt;标签选择器&gt;通配符选择器 组合选择器优先级计算★★★★ 我们把CSS的特殊性分为4个等级，每个等级代表一类选择器。每个等级的值为其所代表的选择器的个数乘以这一等级的权值，最后把所有等级的值相加得出选择器的特殊值。 4个等级的定义如下： 第一等：代表内联样式，如: style=””，权值为1000。 第二等：代表ID选择器，如：#content，权值为100。 第三等：代表类，伪类和属性选择器，如.content，权值为10。 第四等：代表类型选择器和伪元素选择器，如div p，权值为1。权重一样时后者覆盖前者 2017.11.20 ####样式优先级行内样式&gt;内部样式&gt;外部引入样式 !important强行提升重要性至最高 1@import url(&quot;相对路径&quot;)，需要顶格写在style中，只能引入CSS文件。引入顺序： link引入的css会在页面加载时同步加载。 import引入的css在页面加载完才能加载。####css3 圆角border-radius 四个值时，分别对应四个角； 三个值时，分别表示左上，右上左下，右下； 两个值时，分别表示左上右下，右上左下； 一个值时，表示四个角 实现圆形 阴影box-shadow 有五类值 阴影可以堆叠★★★★ overflow：hidden溢出隐藏 overflow-y：hidden单方向溢出隐藏 2017.11.21 ####浮动float★★★★ 浮动元素会脱离文档流，不占空间；默认会覆盖在普通DOM元素上。 浮动会造成父级的盒子塌陷 浮动最初运用是为了实现文字环绕 浮动会挤压文本格式的内容（包括文字，行内元素，行内块级元素） 父级规定宽高之后，尽管浮动脱离了文档流，但内容不够依旧会掉下去。 浮动只会在父元素内部浮动，不会脱离父级限定的宽高范围。 浮动会让元素变为块级元素。 浮动排列原则： 后一个只会被紧挨的前一个影响，空间够则紧挨排列在后，不够空间，会以前一个盒子的高度为基准换到下一行。 红色盒子卡住了黑色盒子，在空间不够时，会掉到下一行，但不会填补空缺，而是以红色盒子高度为基准。 对比可知，浮动排列规则。 ★★★★★ ####清除浮动：清除浮动造成的父级元素塌陷 clear，三个值:left,right,both. 一般是通过创建一个新的同级的元素盒子，给他的css添加clear属性，来清除它前面同级元素的浮动。 伪元素法：通过after添加的dom元素，不在页面dom树种，是主流的清除浮动方法，原理同第一种。 具体实现方法如图： ★★★★★ ####最小宽度和最大宽度 min-width:用像素设定大小时，常限定最小宽度，防止盒子变形。 此时，浏览器窗口继续变小之后，元素不会变形。即小于这个宽度后，盒子不会再被挤压变小，而是被遮盖。 max-width:百分比设定大小时，常限定最大宽度，防止盒子变形。 -此时，浏览器窗口继续变大后，元素盒子不会再拉长。即大于这个宽度后，盒子宽度不再增加。####定位 position定位 static默认，没变化 relative相对定位- 相对定位半脱离文档流，相对原来位置移动，子元素也会随着元素一起移动。 - 但是不会造成盒子塌陷，即在父级中原来的空间占位不会消失。 - 相对定位不会改变元素类型 absolute绝对定位- 绝对定位完全脱离文档流，相对有定位属性的父级元素移动，如果没有，则参考body移动。 - 会造成盒子塌陷，在父级中的空间占位消失。 - 绝对定位会改变元素类型为**块级** - `margin：auto`失效 fixed固定定位 相对浏览器窗口定位，不会移动 z-index层级 绝对定位层级&gt;相对定位（给出位移值的）层级&gt;浮动元素层级&gt;普通元素层级（没给位移值的相对定位层级） 默认层级都是0 层级都是相对的，在父级内部，同级元素进行比较。 不同级（辈分）的元素不能比较层级。 2017.11.23 ####表单form action属性：标识表单提交的地址。 method属性，表单数据的提交方式。 get方法 post方法 input元素：输入框。 type类型属性： text （文本框） ，password（密码框），radio（单选框），checkbox（复选框），button（普通按钮），file（文件上传）可限定文件类型！！- 复选框![Alt text](./1511432806144.png) - 复选框中加上`checked`表示默认选中，`disabled`禁制使用。 - 普通按钮![Alt text](./1511432786801.png) - 重置按钮![Alt text](./1511432902424.png) - 提交按钮![Alt text](./1511433177191.png) - 提交数据包括：name属性的关键字和value属性的值，两者组成的键值对。 lable绑定文本到目标ID的选择框上。可实现文字点击选中效果！- ![Alt text](./1511432600393.png) placeholder框内提示信息 selection下拉选框 option下拉选项。加上selected则表示此项默认选中。 textarea文本区域 fieldset组合表单控件，是块级元素。 legend此表单区块的标题 PS：outline：none去掉默认的焦点元素框，默认是蓝色。 ####focus伪类，常用于表单元素 如： ####表格table 表格的一般组成包括thead，tbody，tfoot； 表格具备对齐属性：即改变某一行或者某一列甚至某个格子时，其他元素会行列对齐次。 table的border属性只对最外层加边框。 单元格合并 colspan=？不同列合并，值表示合并的个数，多的单元格会被挤压。 rowspan=？不同行合并，值表示合并的个数，多的单元格会被挤压。 单元格默认类型为table-cell，td，tr，th不支持margin属性，且有默认的padding=1。 边框间距border-spacing：加给table标签，可以控制边框距离，默认两个值，分别控制x，y。 边框合并border-collapse：collapse 2017.11.24 ####iframe框架iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。 通过对a标签的target属性绑定iframe的name值，可实现链接跳转的绑定，及对应显示。即点击a标签对应文字，框架内可显示京东的首页！ ####css继承总结 默认继承的有：color、font、text-align、text-indent、letter-spacing、word-spacing、list-style a标签的颜色值不继承父级的color，有自己的默认颜色。 可以使用inherit来明确继承父级相应的属性值。####css重用通过给元素添加具有固定样式的类，达到样式的高效重复使用的目的。★★★★★选项卡图标！！！ 用法如下：####css书写顺序 第一位：关乎元素类型的 display positon float第二位：元素自身的特性属性 width height border margin padding第三位：其他属性 text font background第四位：css3的属性 ####浏览器前缀谷歌：-webkit-火狐：-moz-欧朋：-o-IE：-ms- ####swiper轮播插件 ####阿里图标是一种字体图标，不会因为放大缩小而模糊。一、单色图标兼容IE8+以上所有现代浏览器。不支持彩色图标！但可以通过CSS进行后期修改。通过引入css文件，给i标签加特定的类名实现二、多色图标性能较差，兼容性较差，不推荐使用。通过引入JS文件，些svg代码块实现 @(培训)[标签1, 标签2, 标签3]]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
</search>
