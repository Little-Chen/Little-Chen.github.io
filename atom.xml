<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Little Chen</title>
  
  <subtitle>record</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-23T08:24:38.240Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>陈乾</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图解HTTP笔记</title>
    <link href="http://yoursite.com/2018/03/23/%E5%9B%BE%E8%A7%A3HTTP%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/23/图解HTTP笔记/</id>
    <published>2018-03-23T08:02:03.000Z</published>
    <updated>2018-03-23T08:24:38.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><h3 id="1-1-http协议，即超文本传输协议。为TCP-IP的一个子集。"><a href="#1-1-http协议，即超文本传输协议。为TCP-IP的一个子集。" class="headerlink" title="1.1 http协议，即超文本传输协议。为TCP/IP的一个子集。"></a>1.1 http协议，即超文本传输协议。为TCP/IP的一个子集。</h3><ul><li>TCP/IP协议族：包含HTTP协议。</li><li><p>TCP/IP的分层管理：</p><ul><li><strong>应用层</strong>：预存了各类应用服务，如：FTP、DNS</li><li><strong>传输层</strong>：提供了计算机间的数据传输，如：TCP、UDP</li><li><strong>网络层</strong>：处理网络上流动的数据包（数据的最小单位）</li><li><strong>数据链路层</strong>：处理网络连接的硬件部分。</li></ul></li><li><p><strong>TCP/IP通信流程</strong></p><ul><li>发送客户端在应用层发出查看请求，传输层将接受到的数据（请求报文）进行分割，并以此标序后发给网络层。在网络层增加通信目的地的MAC地址后发送给链路层。</li><li>接收端在链路层收到数据，按照序号向上层发送，最终抵达应用层，服务器得到请求。<h5 id="发送端在每层传输时，都会逐层打上首部信息。接收端则依次删去。-这种数据信息包装的做法叫做封装！"><a href="#发送端在每层传输时，都会逐层打上首部信息。接收端则依次删去。-这种数据信息包装的做法叫做封装！" class="headerlink" title="发送端在每层传输时，都会逐层打上首部信息。接收端则依次删去。  这种数据信息包装的做法叫做封装！"></a>发送端在每层传输时，都会逐层打上<strong>首部</strong>信息。接收端则依次删去。  这种数据信息包装的做法叫做<code>封装</code>！</h5></li></ul></li></ul><h3 id="1-2-IP、TCP、DNS"><a href="#1-2-IP、TCP、DNS" class="headerlink" title="1.2 IP、TCP、DNS"></a>1.2 IP、TCP、DNS</h3><h4 id="1-2-1-IP协议"><a href="#1-2-1-IP协议" class="headerlink" title="1.2.1 IP协议"></a>1.2.1 IP协议</h4><ul><li><strong>IP协议</strong>处在<mark>网络层</mark>，功能是<code>实现数据包的传送</code>。确保数据送达的两个重要条件是： <strong>IP地址和MAC地址</strong>。<ul><li>IP地址：节点被分配到的地址。（可变）</li><li>MAC地址：网卡所属的固定地址。（固定）</li></ul></li><li><strong>ARP</strong>：一种解析地址的协议。可以通过IP地址查询相应MAC地址。<br> <br></li><li>整个通信过程其实经历了很多次随机中转，称为<strong>路由选择</strong>。<br><br><h4 id="1-2-2-TCP协议"><a href="#1-2-2-TCP协议" class="headerlink" title="1.2.2 TCP协议"></a>1.2.2 TCP协议</h4></li><li><strong>TCP协议</strong>位于<mark>传输层</mark>，<code>提供字节流服务，确保可靠性</code>。<ul><li>即把大段的数据分割成为有序<strong>报文段</strong>，成为一个个<strong>数据包</strong>进行管理，使传输更<strong>稳定</strong>，可以传输更<strong>大体量</strong>的数据。</li><li>此外，为确保数据送达，TCP协议建立连接进行了<mark>三次握手</mark>。 <ul><li>1.首先发送端发送具有<code>SYN（同步）</code>标志的数据包，表示请求连接。</li><li>2.接受端收到后，回传一个<code>SYN和ACK（确认）</code>的数据包，表示确认收到。</li><li>3.发送端收到后再发送一个标有<code>SYN</code>的数据包，代表“握手结束”，连接已确认建立。<br><br></li></ul></li><li>断开连接进行了<mark>四次握手</mark><ul><li>1.客户端主动关闭连接时，发送一个<code>FIN</code>给服务端，终止连接。</li><li>2.服务端受到后，回传一个<code>ACK（确认）</code>数据包，确认关闭信息。</li><li>3.过一会儿，服务器关闭后，发送一个<code>FIN</code>给客户端表示关闭。</li><li>4.客户端收到<code>FIN</code>给服务器发送<code>ACK</code>，表示确认收到关闭信息。连接中断。</li></ul></li></ul></li></ul><!-- ![Alt text](/article_img/图解HTTP笔记(1).png) --><img src="/article_img/图解HTTP笔记(1).png" class="[class names]" title="[width] [height] [title text [alt text]]"><blockquote><p>SYN：同步序号，是TCP建立连接时使用的握手信号<br>ack：接收端给发送端的一种传输类控制字符，表示发来的数据已确认接收无误<br>FIN：TCP终止时使用的挥手信号</p></blockquote><h4 id="1-2-3-DNS协议"><a href="#1-2-3-DNS协议" class="headerlink" title="1.2.3 DNS协议"></a>1.2.3 DNS协议</h4><ul><li><strong>DNS</strong>位于应用层，是一个<strong>分布式数据库。</strong>提供<strong>域名到IP的解析服务</strong>。<br> DNS协议提供域名查找IP地址，或者逆向查询的服务。<br> <br></li></ul><p>以上参考了文章：<a href="https://blog.csdn.net/the_scent_of_th_soul/article/details/52052495" target="_blank" rel="noopener">TCP连接的建立与终止过程</a><br><a href="[https://blog.csdn.net/the_scent_of_th_soul/article/details/52052495]" title="[TCP连接的建立与终止过程]">text url</a></p><h3 id="1-3-URL-URI"><a href="#1-3-URL-URI" class="headerlink" title="1.3 URL/URI"></a>1.3 URL/URI</h3><ul><li>URI/URL：   统一资源标识符/统一资源定位符<strong>【URL是URI的子集！】</strong></li><li><strong>URL</strong> ：就是我们常使用的Web浏览器访问页面所要输入的网页地址。</li><li><strong>URI格式:</strong><br><strong>http:// user:pass @<a href="http://www.example.jp:80" target="_blank" rel="noopener">www.example.jp:80</a> /dir/index.htm ?uid=1#ch1</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://                 ①协议方案名</span><br><span class="line">user:pass               ②登录信息</span><br><span class="line">www.example.jp          ③服务器地址（域名）</span><br><span class="line">80                      ④服务器端口号</span><br><span class="line">dir/index.htm           ⑤文件路径</span><br><span class="line">?uid=1                  ⑥查询字符串</span><br><span class="line">ch1                     ⑦片段标识符</span><br><span class="line">1、3、5是必须属性！</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、简单的HTTP协议"><a href="#二、简单的HTTP协议" class="headerlink" title="二、简单的HTTP协议"></a>二、简单的HTTP协议</h2><h3 id="2-1-HTTP简单通信过程"><a href="#2-1-HTTP简单通信过程" class="headerlink" title="2.1 HTTP简单通信过程"></a>2.1 HTTP简单通信过程</h3><ul><li>请求访问资源的称为<strong>客户端</strong>，提供资源响应的称为<strong>服务端</strong>。</li><li><strong>请求报文</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET / index.htm HTTP/<span class="number">1.1</span></span><br><span class="line">Host: hackr.jp</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">16</span></span><br><span class="line"><span class="comment">//空行</span></span><br><span class="line">name = ueno&amp;age=<span class="number">37</span></span><br></pre></td></tr></table></figure></li></ul><p>由请求访问服务器的<code>类型方法</code>，<code>请求资源对象</code>（request-URI），<code>协议版本号</code>，<code>可选请求首部字段</code>和<code>内容实体</code>构成。</p><ul><li><strong>响应报文</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK </span><br><span class="line"><span class="built_in">Date</span>: Tue , <span class="number">10</span> jul <span class="number">2012</span> <span class="number">06</span>:<span class="number">50</span>:<span class="number">15</span> GMT</span><br><span class="line">Content-Length: <span class="number">362</span></span><br><span class="line">Content-Type: text/html</span><br><span class="line"><span class="comment">//空行</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>由<code>协议版本</code>，<code>状态码</code>，<code>状态码原因短语</code>，<code>响应首部字段</code>和响应<code>主体</code>构成。</p><h3 id="2-2-HTTP是无状态协议"><a href="#2-2-HTTP是无状态协议" class="headerlink" title="2.2 HTTP是无状态协议"></a>2.2 HTTP是无状态协议</h3><ul><li><strong>HTTP是一种无状态协议</strong>：是为了更快速地处理大量事物，减少服务器资源消耗，确保协议可伸缩性而设计的。<br><strong>为了弥补无状态的缺点，引入了Cookie技术。</strong></li><li><p><strong>HTTP请求方法：</strong></p><ul><li>GET：获取资源</li><li>POST：传输实体主体</li><li>PUT：传输文件（不带任何验证机制，不安全）</li><li>HEAD：获取报文首部（通信状态）。</li><li>DELETE：删除文件</li><li>OPTION：询问支持的传输方法</li><li>TRACE：追踪路径</li><li>CONNECT：要求用隧道协议连接代理</li><li>等。。。<blockquote><p>详见参考：http六种 请求方法</p></blockquote></li></ul></li><li><p><strong>建立持久连接</strong>（HTTP keey-alive 或 HTTP connection reuse）保持TCP的状态。</p></li><li><strong>管线化</strong>实现，并行发送多个请求，无需等待。</li><li><strong>Cookie状态管理</strong><ul><li>通过在<strong>请求</strong>和<strong>响应报文</strong>中写入Cookie信息控制客户端状态。</li><li>响应报文返回一个<code>Set-Cookie</code>首部字段信息，保存在客户端。下次请求会自动添加到请求报文中发送。<mark>代码参见书P40</mark></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、基础概念&quot;&gt;&lt;a href=&quot;#一、基础概念&quot; class=&quot;headerlink&quot; title=&quot;一、基础概念&quot;&gt;&lt;/a&gt;一、基础概念&lt;/h2&gt;&lt;h3 id=&quot;1-1-http协议，即超文本传输协议。为TCP-IP的一个子集。&quot;&gt;&lt;a href=&quot;#1-1-
      
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JS迭代器与循环</title>
    <link href="http://yoursite.com/2018/03/19/JS%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2018/03/19/JS迭代器与循环/</id>
    <published>2018-03-19T11:02:03.000Z</published>
    <updated>2018-03-22T07:49:53.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="map、eval、for…in、for…of、forEach"><a href="#map、eval、for…in、for…of、forEach" class="headerlink" title="map、eval、for…in、for…of、forEach"></a>map、eval、for…in、for…of、forEach</h2><h3 id="最早的数组遍历方式"><a href="#最早的数组遍历方式" class="headerlink" title="最早的数组遍历方式"></a>最早的数组遍历方式</h3><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index &lt; a.length;index++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map定义和方法"><a href="#map定义和方法" class="headerlink" title="map定义和方法"></a>map定义和方法</h3><p><strong>map</strong>理解为“映射”的意思，基本用法同forEach，为ES5新增属性方法。<br>❤<strong>map()方法返回一个新数组，数组中的元素为原始数组元素调用函数处理的后值。</strong><br>❤<strong>map()方法按照原始数组元素顺序依次处理元素。</strong> </p><p><strong>注意：</strong><br>map不会对空数组进行检测<br>map不会改变原始数组<br>处理函数必须有<strong>返回值</strong>，否则会映射成undefined。<br><strong>map使用语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue，index，arr</span>),<span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure><p>参数:</p><ol><li>处理函数（必须），下属参数依次为：当前值value，序号index，原数组arr。</li><li>thisValue(可选)</li></ol><p>❤另外，由于map方法为ES5新增方法，不支持<strong>IE9以下浏览器</strong>。如果需要兼容，可用<strong>原型扩展</strong>。<br>方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.map != <span class="string">"function"</span>) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span> (<span class="params">fn, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>, length = <span class="keyword">this</span>.length; k &lt; length; k++) &#123;      </span><br><span class="line">         arr.push(fn.call(context, <span class="keyword">this</span>[k], k, <span class="keyword">this</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jquery中map方法用法同原生"><a href="#jquery中map方法用法同原生" class="headerlink" title="jquery中map方法用法同原生"></a>jquery中map方法用法同原生</h4><p>且从 1.6 开始，该函数也支持遍历对象。它接受两个参数，分别是要处理的数组/对象和处理函数，其处理函数也接受键值和键名两个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**** jQuery $.map() ****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 筛选数组元素</span></span><br><span class="line"><span class="keyword">var</span> arrTmp = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> bigNum = $.map(arrTmp,<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// bigNum -&gt; [3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理对象</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    jack:&#123;<span class="attr">age</span>:<span class="number">9</span>&#125;,</span><br><span class="line">    tom:&#123;<span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    bobo:&#123;<span class="attr">age</span>:<span class="number">30</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oldMan = $.map(person,<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(value.age&gt;<span class="number">26</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// oldMan -&gt; ["bobo"]</span></span><br></pre></td></tr></table></figure><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><blockquote><p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p></blockquote><p>注意：<br><strong>strong text</strong>该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"x=10;y=20;document.write(x*y)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">eval</span>(<span class="string">"2+2"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">10</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">eval</span>(x+<span class="number">17</span>))</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p> ###1 forEach<br>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123; <span class="comment">// ... &#125;);</span></span><br></pre></td></tr></table></figure><p>forEach遍历数组，而不是遍历对象哦，而且在遍历的过程中不能被终止,必须每一个值遍历一遍后才能停下来.<br>也就是说：<strong>你不能使用break来退出循环, 不能使用return语句来返回到外层</strong></p><h4 id="jquery中forEach"><a href="#jquery中forEach" class="headerlink" title="jquery中forEach"></a>jquery中forEach</h4><p>注意其与jQuery的$.each类似，只不过参数正好是相反的！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.each([], <span class="function"><span class="keyword">function</span>(<span class="params">index, value, array</span>) </span>&#123; <span class="comment">// ... &#125;);</span></span><br></pre></td></tr></table></figure><h3 id="2-for…in"><a href="#2-for…in" class="headerlink" title="2 for…in"></a>2 for…in</h3><h4 id="适合进行普通对象的遍历"><a href="#适合进行普通对象的遍历" class="headerlink" title="适合进行普通对象的遍历"></a>适合进行普通对象的遍历</h4><blockquote><p>for-in循环遍历对象的key，即键值对的键名。</p></blockquote><p>特性如下：</p><ol><li>方法遍历到的index（或key）类型为<code>String</code>，若无意间进行了字符串计算，会带来许多不便。</li><li><code>for-in</code>循环会遍历对象的所有<strong>可枚举属性</strong>。什么意思呢？就是除了遍历数组元素之外，还会遍历：自定义属性，原型上的属性。</li><li>一般不推荐遍历数组，因为for in遍历顺序是<strong>随机的</strong>，适合进行<strong>普通对象</strong>的遍历。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArry =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">myArry.desc =<span class="string">'four'</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">in</span> myArry)&#123; <span class="comment">//循环key</span></span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//"0"</span></span><br><span class="line"><span class="comment">//"1"</span></span><br><span class="line"><span class="comment">//"2"</span></span><br><span class="line"><span class="comment">//"3"</span></span><br><span class="line"><span class="comment">//"desc" 注意这里添加上去的属性也被遍历出来了</span></span><br></pre></td></tr></table></figure><p>for…in由于历史遗留问题，它遍历的实际上是对象的属性名称，一个Array数据也是一个对象，数组中的每个元素的索引被视为属性名称，所以我们可以看到使用for…in循环Array数组时，拿到的其实是每个元素的索引.</p><p>PS:若要避免原型链上的属性也被遍历到，可采用hasOwnProperty()方法去过滤掉对象原型链上的属性。</p><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><h4 id="for-of循环适合遍历数组"><a href="#for-of循环适合遍历数组" class="headerlink" title="for-of循环适合遍历数组"></a>for-of循环适合遍历数组</h4><blockquote><p>循环遍历对象的值，即键值对的键值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myArry =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">myArry.desc =<span class="string">'four'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> myArry)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>特性如下：</p><ul><li>这是最简洁、最直接的遍历数组元素的语法。</li><li>这个方法避开了<code>for-in</code>循环的所有缺陷，解决了<code>forEach</code>的不可中断问题。</li><li>for…of为ES6新增方法。</li><li>不推荐for…of遍历普通对象，实在需要用for…of遍历，可搭配<code>Object.keys()</code>实现。</li></ul><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student=&#123;</span><br><span class="line">    name:<span class="string">'wujunchuan'</span>,</span><br><span class="line">    age:<span class="number">22</span>,</span><br><span class="line">    locate:&#123;</span><br><span class="line">    country:<span class="string">'china'</span>,</span><br><span class="line">    city:<span class="string">'xiamen'</span>,</span><br><span class="line">    school:<span class="string">'XMUT'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(student))&#123;</span><br><span class="line">    <span class="comment">//使用Object.keys()方法获取对象key的数组</span></span><br><span class="line">    <span class="built_in">console</span>.log(key+<span class="string">": "</span>+student[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p><strong>for…in与for…of</strong><br>格式对比：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>推荐在循环<strong>对象</strong>属性的时候，使用for…in,在遍历<strong>数组</strong>的时候的时候使用for…of。</p></li><li><p>for in是遍历<strong>键名</strong>，for of是遍历<strong>键值</strong>。</p></li><li><p>注意，for…of是ES6新引入的特性。修复了ES5引入的for…in的不足。</p></li></ol><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://www.cnblogs.com/ruoqiang/p/6217929.html" target="_blank" rel="noopener">forEach/for…in/for…of</a><br><a href="https://github.com/wujunchuan/wujunchuan.github.io/issues/11" target="_blank" rel="noopener">迭代器与for…of循环</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;map、eval、for…in、for…of、forEach&quot;&gt;&lt;a href=&quot;#map、eval、for…in、for…of、forEach&quot; class=&quot;headerlink&quot; title=&quot;map、eval、for…in、for…of、forEach&quot;&gt;&lt;/a&gt;map、eval、for…in、for…of、forEach&lt;/h2&gt;&lt;h3 id=&quot;最早的数组遍历方式&quot;&gt;&lt;a href=&quot;#最早的数组遍历方式&quot; class=&quot;headerlink&quot; title=&quot;最早的数组遍历方式&quot;&gt;&lt;/a&gt;最早的数组遍历方式&lt;/h3&gt;
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础笔记</title>
    <link href="http://yoursite.com/2018/03/09/HTML%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/09/HTML基础笔记/</id>
    <published>2018-03-09T11:52:03.000Z</published>
    <updated>2018-03-22T08:31:05.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html基础笔记"><a href="#html基础笔记" class="headerlink" title="html基础笔记"></a>html基础笔记</h1><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a><a href="http://tguide.qq.com/main/base.htm#css-list01" target="_blank" rel="noopener">命名规范</a></h3><h3 id="HTML是什么？"><a href="#HTML是什么？" class="headerlink" title="HTML是什么？"></a>HTML是什么？</h3><p>◾超文本标记语言（Hypertext Markup Language，HTML）通过标签语言来标记要显示的网页中的各个部分。一套规则，浏览器认识的规则。<a id="more"></a></p><h3 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h3><p><img src="./1520584805019.png" alt="Alt text"></p><p>◾&lt;!DOCTYPE html&gt; 告诉浏览器使用什么样的html或者xhtml来解析html文档<br>作用：声明文档的解析类型(document.compatMode)，避免浏览器的怪异模式。<br>◾<code>&lt;html&gt;&lt;/html&gt;</code>是文档的开始标记和结束标记。此元素告诉浏览器其自身是一个 HTML 文档，在它们之间是文档的头部<code>&lt;head&gt;</code>和主体<code>&lt;body&gt;</code>。<br>◾<code>&lt;head&gt;&lt;/head&gt;</code>元素出现在文档的开头部分。<code>&lt;head&gt;</code>与<code>&lt;/head&gt;</code>之间的内容不会在浏览器的文档窗口显示，但是其间的元素有特殊重要的意义。<br>◾<code>&lt;title&gt;&lt;/title&gt;</code>定义网页标题，在浏览器标题栏显示。<br>◾<code>&lt;body&gt;&lt;/body&gt;</code>之间的文本是可见的网页主体内容</p><p>2017.10.30<br>一、div布局基础</p><ol><li>网页分层：</li></ol><ul><li><strong>表现层  css</strong></li><li><strong>结构层  html</strong></li><li><strong>行为层  JS</strong></li></ul><ol><li><p><code>meta</code>标签:<br>关键字内容，提供网站相关信息给搜索引擎。<br><strong>常用作</strong>：提高排名，SEO（搜索引擎优化）<br>权重</p><ul><li><code>&lt;meta&gt;</code>元素可提供有关页面的元信息（meta-information），针对搜索引擎和更新频度的描述和关键词</li></ul></li></ol><ul><li><code>charset</code>字符集编码方式</li></ul><ol><li>常用标签</li></ol><ul><li><code>p</code>标签<br>段落标签！</li><li><code>h1-h6</code>标签<br>h1：logo主标题！<br>h2：区块标题！<br>h3-h6依次向下。<br><strong>不要滥用h标签！</strong></li></ul><hr><ul><li><code>sub</code>、<code>sup</code>下标上标</li><li><code>&lt;br/&gt;</code>换行</li><li><code>&lt;hr/&gt;</code>水平线</li><li><code>&lt;i&gt;</code>斜体标签（<code>&lt;em&gt;</code>效果相同）</li><li><code>&lt;b&gt;</code>粗体文本</li><li><code>&lt;strong&gt;</code>加粗<br><code>&lt;strong&gt;</code>标签和<code>&lt;em&gt;</code>标签一样，用于强调文本，但它强调的程度更强一些。<br><strong>不能滥用强调标签！</strong></li></ul><hr><ul><li>有序列表：<code>&lt;ol&gt;&lt;li&gt;</code>嵌套</li><li>无序列表：<code>&lt;ul&gt;&lt;li&gt;</code>嵌套</li><li>常见属性用法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type=&quot;1&quot; start=&quot;10&quot;&gt;</span><br><span class="line">    &lt;li&gt;asd&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;      </span><br><span class="line">//以数字为序号的，从10开始的有序列表</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul type=&quot;circle&quot;&gt;</span><br><span class="line">&lt;li&gt;123&lt;/li&gt;</span><br><span class="line">&lt;li&gt;11&lt;/li&gt;</span><br><span class="line">&lt;li&gt;333&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;     </span><br><span class="line">//无序列表（circle空心圆、disc实心圆、square正方块）</span><br></pre></td></tr></table></figure><ul><li>自定义列表：<code>&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;</code>嵌套使用 <pre><code>-`&lt;dt&gt;`标题-`&lt;dd&gt;`列表项 </code></pre></li></ul><hr><ul><li><p><code>&lt;img/&gt;</code>图片标签<br>1.<code>src</code>引入图片路径。<br>2.<code>alt</code>替代文本，seo抓取关键字。<br>3.<code>title</code>鼠标悬浮提示文字</p></li><li><p><code>background</code> 简写属性在一个声明中设置所有的背景属性。<br>可以设置如下属性：</p><ul><li>background-color             //颜色</li><li>background-position        //定位</li><li>background-size              //大小</li><li>background-repeat          //重复方式</li><li>background-origin    </li><li>background-clip</li><li>background-attachment</li><li>background-image          //图片<br><img src="./1509717789268.png" alt="Alt text"></li></ul></li></ul><p>★★★★</p><ul><li><code>background-attachment：fixed</code>图片固定在窗口的固定位置。</li></ul><hr><ul><li><code>&lt;a&gt;</code>超链接标签</li></ul><ol><li><code>href</code>属性：<br>(1)填写<strong>域名</strong>跳转链接<br>(2)填写下载或打开<strong>文件</strong>路径<br>(3)填写<code>#</code>代表空链接</li><li><code>target</code>属性窗口打开方式：<br>(1)<strong>_self</strong>当前窗口跳转链接<br>(2)<strong>_blank</strong>新窗口跳转链接 </li></ol><hr><ul><li><code>&lt;a&gt;</code>做锚点：页面内指定节点跳转！<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#head&quot;&gt;点击跳转&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id=&quot;head&quot;&gt;第一部分&lt;/p&gt;</span><br><span class="line">&lt;p&gt;第二部分&lt;/p&gt;</span><br><span class="line">&lt;p&gt;第三部分&lt;/p&gt;</span><br><span class="line">&lt;p&gt;第四部分&lt;/p&gt;</span><br><span class="line">//点击即可跳转到第一部分！</span><br></pre></td></tr></table></figure></li></ul><p>扩展：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//锚链接滑动跳转效果</span><br><span class="line">$(&apos;a&apos;).click(function() &#123;</span><br><span class="line">$(&apos;html, body&apos;).animate(&#123;</span><br><span class="line">scrollTop: $($.attr(this, &apos;href&apos;)).offset().top</span><br><span class="line">&#125;, 5000);</span><br><span class="line">return false;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><ul><li>css样式引入方式：</li></ul><ol><li>行内样式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;width:100px;height:200px;&quot;&gt;盒子&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol><li>内嵌式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">#a&#123;样式&#125;;</span><br><span class="line">.b&#123;样式&#125;;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>链接式<br>在<code>&lt;head&gt;&lt;/head&gt;</code>内写入：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;</span><br></pre></td></tr></table></figure><ol><li>导入式（不建议使用）<br>导入样式和链接样式比较相似，采用@import样式导入CSS样式表，在HTML初始化时，会被导入到HTML或者CSS文件中，成为文件的一部分，类似第二种内嵌样式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">@(培训)[标签1, 标签2, 标签3];</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>四种CSS引入方式的优先级</li></ul><ol><li>就近原则</li><li>理论上：行内&gt;内嵌&gt;链接&gt;导入</li><li>实际上：内嵌、链接、导入在同一个文件头部，谁离相应的代码近，谁的优先级高</li></ol><hr><ul><li>color样式：</li></ul><ol><li>颜色或<code>#xxxxxx</code></li><li><code>rgb(x,x,x,x)</code>前三个为三原色掺比<strong>0-255</strong>.最后一个为透明的，<strong>0-1</strong>。</li></ol><hr><ul><li>浏览器默认给<code>body</code>加了一个<code>8px</code>的外边距</li><li><code>ul、ol</code>列表默认也有边距</li><li><code>li</code>默认有缩进</li><li>盒子的实际大小：<br>自身高度+内边距+边框</li><li>盒子的占位空间：<br>自身高度+内边距+边框+外边距</li></ul><hr><ul><li><strong>群组选择器：</strong><br><code>a,div, .box, .top{样式}</code></li><li><strong>通配符选择器：</strong>全局选中！<br><code>*{}</code>  配置方便但是影响性能！（页面渲染时要遍历所有标签，大型网站开发不用）</li><li><strong>类选择器：</strong><code>class</code></li><li><strong>后代选择器：</strong><code>#box p</code></li></ul><hr><ul><li><code>display</code>显示<br>1.<code>block</code>块级元素！<br>独占一行，可设置宽高。<br>没有设置宽高时，继承父级宽高。<br>可容纳其他块级元素和行内元素。</li></ul><p><strong>常见块级元素：</strong></p><ul><li>address - 地址<br>blockquote - 块引用<br>center - 举中对齐块<br>dir - 目录列表<br>div - 常用块级容易，也是css layout的主要标签<br>dl - 定义列表<br>fieldset - form控制组<br>form - 交互表单<br>h1 - 大标题<br>h2 - 副标题<br>h3 - 3级标题<br>h4 - 4级标题<br>h5 - 5级标题<br>h6 - 6级标题<br>hr - 水平分隔线<br>isindex - input prompt<br>menu - 菜单列表<br>noframes - frames可选内容（对于不支持frame的浏览器显示此区块内容）<br>noscript - 可选脚本内容（对于不支持script的浏览器显示此内容）<br>ol - 排序列表<br>p - 段落<br>pre - 格式化文本<br>table - 表格<br>ul - 非排序列表</li></ul><p>2.<code>inline</code>内联元素！<br>不可设置宽高<br>可与其他元素同处一行<br>只能容纳内联元素<br>不支持设置上下内、外边距，可设置左右内、外边距。<br>内联元素间有<strong>空格</strong>，就像文字间隙！<br><img src="./1509711818527.png" alt="Alt text"></p><p>如上，设置内边距时，元素内容位置不变，内边距会上下撑开，从而覆盖在其他元素上。</p><p><strong>常见内联元素：</strong></p><ul><li>a - 锚点<br>abbr - 缩写<br>acronym - 首字<br>b - 粗体（不推荐）<br>bdo - bidi override<br>big - 大字体<br>br - 换行<br>cite - 引用<br>code - 计算机代码（在引用源码的时候需要）<br>dfn - 定义字段<br>em - 强调<br>font - 字体设定（不推荐）<br>i - 斜体<br>img - 图片<br>input - 输入框<br>kbd - 定义键盘文本<br>label - 表格标签<br>q - 短引用<br>s - 中划线（不推荐）<br>samp - 定义范例计算机代码<br>select - 项目选择<br>small - 小字体文本<br>span - 常用内联容器，定义文本内区块<br>strike - 中划线<br>strong - 粗体强调<br>sub - 下标<br>sup - 上标<br>textarea - 多行文本输入框<br>tt - 电传文本<br>u - 下划线<br>var - 定义变量</li></ul><p>★★★★<br>其中：<code>img</code>较为特殊。img元素作为替换元素，有着类似于Inline-block的行为！</p><ol><li>可以设置width/height;</li><li>默认的，img元素在屏幕占据的空间与其图片的实际像素一致</li><li>如果img标签的包裹元素为也为inline元素，则img的边界可以超出其直接父元素的边界，直到自己的宽、高达到最大或者设定值为止，而且文档流中img的兄弟元素也不能遮盖住img。最常见的就是<code>&lt;a&gt;</code>里面包含的<code>&lt;img&gt;</code></li><li>可以通过<code>text-alin：center</code>实现居中！</li></ol><p>3.<code>inline-block</code>行内块级元素<br>兼具块级元素与内联元素的特性</p><hr><ul><li><strong>行内块级元素特性：</strong><br>※ <code>margin：0 auto</code>只对块级元素有效！<br>且<code>IE6、IE7</code>不支持！<br>※ <code>text-align</code>文字对齐方式<br>1.<code>left</code><br>2.<code>center</code><br>3.<code>right</code><br>※<strong>行内块级元素作为文字解析</strong>，因此可以通过<code>text-align：center</code>来实现<strong>居中对齐</strong>。</li></ul><hr><ul><li>外边距合并：<br>当块级元素的外边距相遇时会发生合并，合并后的共同外边距以较大者为准。<br>1.同级块级元素合并：<br>合并后以较大者作为两者间距！<br>2.父子块级元素合并：<br>合并后以较大者作为此方向公共外边距。</li></ul><ul><li>解决边距合并方法：<br>改变元素类型，使其不为块级元素。<br>或者在元素间插入文字等其他元素。</li></ul><hr><p>★★★★</p><ul><li><code>p</code>标签不能包<code>p</code>标签和块级元素。</li><li><code>a</code>标签不能包<code>a</code>标签。可以包裹其它。<ul><li>但是<code>a</code>标签无法完美包裹<strong>行内块级元素</strong>和<strong>块级元素</strong>，但是页面中常用这种包裹。因为这样做可以使整个div都可以点击访问，用户体验较好。</li></ul></li></ul><hr><p>★★★★</p><ul><li>垂直对齐方式<code>vertical-align</code><ul><li><strong>只对行内或者行内块有效！</strong></li><li>基线表示： <img src="./1509881745425.png" alt="Alt text"></li><li><code>行内元素</code>和<code>行内块元素</code>对齐方式！<br>1.行内块没有文字的时候，块底端默认以父级的基线（<code>baseline</code>）对齐！</li><li><img src="./1509881680352.png" alt="Alt text"><br>2.行内块有文字的时候，默认块的基线与父元素的基线对齐。<ul><li><img src="./1509889324956.png" alt="Alt text"></li></ul></li></ul></li></ul><ul><li>其他对齐方式：<ul><li><code>top</code>  元素的顶端与父元素行高（<strong>不是高度</strong>）的顶端对齐</li><li><code>bottom</code>    元素的底端与父元素行高底端对齐</li><li><code>middle</code>    元素的中线与父元素行高中线对齐</li><li><code>text-top</code>元素的顶端与父元素中文字顶线对齐</li><li><img src="./1509890321829.png" alt="Alt text"></li><li><code>text-bottom</code>元素的底端与父元素中文字底线对齐</li><li><img src="./1509890293480.png" alt="Alt text"></li><li><strong>文字对齐受行高影响，不受父元素盒子大小影响，行高若超过父盒子大小，内容则会溢出。</strong> </li><li><strong>行高有继承效果！</strong></li></ul></li></ul><hr><ul><li><strong>HTML5 规范声明：应该使用 <code>&lt;h1&gt; - &lt;h6&gt;</code> 来表示标题，使用 <code>&lt;em&gt;</code> 标签来表示强调的文本，应该使用 <code>&lt;strong&gt;</code> 标签来表示重要文本，应该使用 <code>&lt;mark&gt;</code> 标签来表示标注的/突出显示的文本。</strong></li></ul><hr><p>2017.11.16</p><ul><li>鼠标指针<ol><li><code>cursor</code> 鼠标样式指针<ul><li><code>pointer</code>   手型</li><li><code>move</code>     可移动指针</li><li><code>text</code>  光标指示文本</li><li><code>wait</code>       加载中</li><li><code>help</code>        帮助</li></ul></li><li>自定义指针<ul><li><code>cursor：url（图片路径），pointer</code></li></ul></li></ol></li><li>透明度<ul><li><code>opacity</code>：整个盒子（包括其子元素）透明度变化 0-1。</li><li><code>background-color：rgb（255,0,0,0.5</code>：最后一项只控制背景颜色的透明度。 </li><li>rgb<strong>是css3的属性，IE一般不兼容</strong></li><li>background-color<strong>在低版本的IE中不兼容</strong></li></ul></li></ul><hr><ul><li>伪类选择器<ul><li><code>.box：hover</code></li></ul></li></ul><hr><p>2017.11.17</p><ul><li><p>字体</p><ul><li><p><code>font-family</code>字体样式，包括<strong>微软雅黑，宋体，楷体等常见字体群</strong></p></li><li><p><code>font-size</code>字体大小</p></li></ul><ol><li><p><strong>PS:</strong>一般浏览器默认样式为<code>16px</code>，火狐浏览器支持<code>12px</code>以下的字体大小，其他浏览器不支持<code>12px</code>以下的字体大小。</p></li><li><p><code>em</code>做文字大小单位时，以父元素的文字大小为参考基准单位。</p></li><li><code>em</code>做宽高时，以当前元素的字体大小做基准。</li><li>eg：浏览器默认字体大小<code>16px</code>，<code>font-size：2em</code>则字体大小为<code>32px</code>。<code>width：10em</code>则元素宽度为<code>320px</code>。</li><li><code>rem</code>：以根标签<code>html</code>的字体大小作为基准。多用于移动端！</li></ol><ul><li><code>font-weight</code> 字体粗细<ol><li>取值：<code>100-900</code>或者<code>normal、bold</code></li></ol></li><li><code>font-style</code>字体风格。<ol><li><code>italic</code>字体倾斜  </li><li><code>oblique</code>强制倾斜</li><li><code>normal</code>正常显示</li></ol></li></ul></li></ul><p>★★</p><ul><li><code>font-wariant</code>字体大小写<ul><li><code>small-caps</code>小写字母大写。</li></ul></li></ul><p>★★★★</p><ul><li><strong>font的所有属性都会被继承</strong> </li><li><strong>复合样式</strong>：<ul><li><img src="./1510887976987.png" alt="Alt text"><br><br></li><li><img src="./1510887886252.png" alt="Alt text"></li></ul></li></ul><hr><p>★★★★</p><ul><li><p><code>text</code> 文本</p><ul><li><code>text-transform</code>本文字母大小写<ol><li><code>uppercase</code>小写字母大写</li><li><code>lowercase</code>大写字母小写</li><li><code>capitalize</code>单词首字母大写<ul><li><code>text-align</code>文本水平对齐方式</li></ul></li><li><code>right</code></li><li><code>left</code></li><li><code>center</code> </li><li><code>行内元素无法使用！</code><ul><li><code>text-indent</code>文本段落缩进</li></ul><ol><li><code>px</code></li><li><code>em</code></li><li><code>行内元素无法使用！</code></li></ol></li></ol></li><li><code>text-decoration</code>本文修饰方式<ol><li><code>underline</code>下划线</li><li><code>line-through</code>删除线</li><li><code>overline</code></li></ol></li><li><code>letter-spacing</code>字符间距  单位：<code>px</code></li><li><code>word-spacing</code>单词间距  单位：<code>px</code></li><li><code>white-space</code>换行方式<pre><code>1. `normal`默认方式2. `nowrap`不换行</code></pre></li><li><p><code>word-break</code>css3中换行方式</p><pre><code>1. `normal`默认方式2. `break-all`空间不足时，会拆分完整单词来换行。3. `keep-all`空间不足，不会拆分单词，而是将其整体换到下一行。4.  `行内元素无法使用！`</code></pre></li><li><p><code>text-overflow</code>文本超出设置</p><pre><code>1. `clip`         文本超出2. `ellipsis`   文本超出省略处理3. 配合`overflow：hidden`使用，且`行内元素无法使用！` </code></pre></li><li><img src="./1510902478833.png" alt="Alt text"></li></ul></li></ul><hr><ul><li>特殊字符<ul><li>浏览器会将多个空格当做一个空格处理。</li><li><code>&amp;nbsp；</code>  空格占位符，一个代表一个空格。</li><li><code>&amp;lt；</code>小于符号</li><li><code>&amp;gt；</code>大于符号</li><li><code>&amp;copy；</code>版权符号</li><li><code>reg；</code> 注册商标</li></ul></li></ul><hr><p>2017.11.18</p><p>####高级选择器及a伪类</p><p><strong>一、初级选择器</strong></p><ul><li>后代选择器</li><li>群组选择器<br>★★★★</li><li>子元素选择器：如<code>div &gt; p</code>直系父子才行。<br>★★★★</li><li><p>兄弟选择器：如：<code>div + div</code> 表示div的兄弟div元素。样式只加给<strong>相邻的</strong>兄弟，兄弟间不能有任何其他标签！且样式对元素自身无效，即<strong>自身不变！！！</strong>  。</p><p>★★★★<br><strong>一、属性选择器</strong><br>：元素拥有的任何<strong>属性（包括自定义属性）</strong>都可以作为选择的依据。</p><pre><code>1. 如： `[class]`表示选中有class属性的元素</code></pre><p>或<code>[class=&quot;text&quot;]</code>表示选中有class属性，且属性值唯一为text的元素。<br>或<code>[class=&quot;text-top&quot;]</code>表示选中有class属性，且值唯一为text-top的元素。<br>总结：<strong>可以灵活限定选择范围。</strong></p><pre><code>2. 如：`class ~=&quot;nav&quot;` ，表示选中具备`class属性`，且有一个（可有多个）为`nav`的值的元素。3. 如：`[class |=&quot;nav&quot;]`,表示选中具备class属性，且有以nav或者nav-开头的值的元素。4. **组合使用**：如    - `[href][titile=&quot;name&quot;]`表示选中具有href属性，且title属性值唯一为name的元素。</code></pre></li></ul><p><strong>二、伪类选择器</strong></p><ul><li><code>a:hover</code>鼠标悬停触发事件</li><li><code>a：link</code>匹配所有没有被点击过的链接</li><li><code>a：visited</code>匹配所有被点击过的链接</li><li><code>a：active</code>匹配正在点击触发的链接</li><li><strong>同理其他元素也可以应用以上伪类</strong></li><li>★★当<code>a:hover</code>和<code>a：active</code>同时存在的时候，顺序不能颠倒，否则active样式不生效。</li></ul><p><strong>三、伪元素选择器</strong></p><ul><li><code>p：after</code>添加新元素到目标元素后面，默认生成的是<strong>行内元素</strong>。<br>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">元素！</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;原来&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">样式！</span><br><span class="line">&lt;style&gt;</span><br><span class="line">p&#123;</span><br><span class="line">    font-size:30px; </span><br><span class="line">    background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">p:after&#123;</span><br><span class="line">    content:&quot;新增&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><p>结果如图：<img src="./1511101115990.png" alt="Alt text"></p><ul><li><code>p：before</code>添加新元素到目标元素前面，默认是<strong>行内元素</strong>。</li></ul><p>####四、应用和优先级讨论</p><ul><li>单个选择器优先级<br> <strong>ID选择器&gt;类选择器&gt;标签选择器&gt;通配符选择器</strong> </li><li>组合选择器优先级<strong>计算</strong><pre><code>★★★★我们把CSS的特殊性分为4个等级，每个等级代表一类选择器。每个等级的值为其所代表的选择器的个数乘以这一等级的权值，最后把所有等级的值相加得出选择器的特殊值。</code></pre>  <strong>4个等级的定义如下：</strong><ul><li>第一等：代表内联样式，如: style=””，权值为1000。</li><li>第二等：代表ID选择器，如：#content，权值为100。</li><li>第三等：代表类，伪类和属性选择器，如.content，权值为10。</li><li>第四等：代表类型选择器和伪元素选择器，如div p，权值为1。<br><strong>权重一样时后者覆盖前者</strong></li></ul></li></ul><hr><p>2017.11.20</p><p>####样式优先级<br>行内样式&gt;内部样式&gt;外部引入样式  <code>!important</code>强行提升重要性至最高</p><p>1<code>@import url(&quot;相对路径&quot;)</code>，需要顶格写在style中，只能引入CSS文件。<br>引入顺序：</p><ul><li><code>link</code>引入的css会在页面加载时同步加载。</li><li><code>import</code>引入的css在页面加载完才能加载。<br>####css3</li><li><p>圆角<code>border-radius</code></p><ol><li>四个值时，分别对应四个角；</li><li>三个值时，分别表示左上，右上左下，右下；</li><li>两个值时，分别表示左上右下，右上左下；</li><li>一个值时，表示四个角</li><li>实现圆形 <img src="./1511173588921.png" alt="Alt text"></li></ol></li><li><p>阴影<code>box-shadow</code></p><ol><li>有五类值<img src="./1511173978654.png" alt="Alt text"></li><li>阴影可以堆叠<img src="./1511174671356.png" alt="Alt text"><br>★★★★<ul><li><code>overflow：hidden</code>溢出隐藏</li><li><code>overflow-y：hidden</code>单方向溢出隐藏</li></ul></li></ol></li></ul><hr><p>2017.11.21</p><p>####浮动float<br>★★★★</p><ul><li>浮动元素会脱离文档流，不占空间；默认会覆盖在普通DOM元素上。</li><li>浮动会造成父级的盒子塌陷</li><li>浮动最初运用是为了实现<strong>文字环绕</strong></li><li>浮动会挤压文本格式的内容（包括文字，行内元素，行内块级元素）</li><li>父级规定宽高之后，尽管浮动脱离了文档流，但内容不够依旧会掉下去。</li><li>浮动只会在父元素内部浮动，不会脱离父级限定的宽高范围。</li><li>浮动会让元素变为块级元素。</li><li>浮动排列原则：<ul><li>后一个只会被紧挨的前一个影响，空间够则紧挨排列在后，不够空间，会以前一个盒子的高度为基准换到下一行。</li><li><img src="./1511271243903.png" alt="Alt text"><br>红色盒子卡住了黑色盒子，在空间不够时，会掉到下一行，<strong>但不会填补空缺，而是以红色盒子高度为基准</strong>。<ul><li><img src="./1511271379599.png" alt="Alt text">对比可知，<strong>浮动排列规则</strong>。</li></ul></li></ul></li></ul><p>★★★★★</p><p>####清除浮动：清除浮动造成的父级元素塌陷</p><ul><li><p><code>clear</code>，三个值:left,right,both.</p><ul><li><img src="./1511266569353.png" alt="Alt text"><br>一般是通过<strong>创建一个新的同级的元素盒子</strong>，给他的css添加clear属性，来清除它前面同级元素的浮动。</li></ul></li><li><p>伪元素法：通过after添加的dom元素，不在页面dom树种，是<strong>主流的清除浮动方法</strong>，原理同第一种。</p><ul><li>具体实现方法如图：<img src="./1511267515655.png" alt="Alt text"></li></ul></li></ul><p>★★★★★</p><p>####最小宽度和最大宽度</p><ul><li><p><code>min-width</code>:<strong>用像素设定大小时，常限定最小宽度，防止盒子变形。</strong></p><ul><li>此时，浏览器窗口继续变小之后，元素不会变形。即小于这个宽度后，盒子不会再被挤压变小，而是被遮盖。</li></ul></li><li><p><code>max-width</code>:<strong>百分比设定大小时，常限定最大宽度，防止盒子变形。</strong><br>   -此时，浏览器窗口继续变大后，元素盒子不会再拉长。即大于这个宽度后，盒子宽度不再增加。<br>####定位</p></li><li><p><code>position</code>定位</p><ol><li><code>static</code>默认，没变化</li><li><code>relative</code>相对定位<pre><code>- 相对定位半脱离文档流，相对原来位置移动，子元素也会随着元素一起移动。- 但是不会造成盒子塌陷，即在父级中原来的空间占位不会消失。- 相对定位不会改变元素类型</code></pre></li><li><code>absolute</code>绝对定位<pre><code>- 绝对定位完全脱离文档流，相对有定位属性的父级元素移动，如果没有，则参考body移动。- 会造成盒子塌陷，在父级中的空间占位消失。- 绝对定位会改变元素类型为**块级**- `margin：auto`失效</code></pre></li><li><code>fixed</code>固定定位<ul><li>相对浏览器窗口定位，不会移动</li></ul></li></ol></li><li><p><code>z-index</code>层级</p><ol><li>绝对定位层级&gt;相对定位（<strong>给出位移值的</strong>）层级&gt;浮动元素层级&gt;普通元素层级（<strong>没给位移值的相对定位层级</strong>）</li><li>默认层级都是0</li><li>层级都是相对的，在父级内部，同级元素进行比较。</li><li>不同级（辈分）的元素不能比较层级。</li></ol></li></ul><hr><p>2017.11.23</p><p>####表单<code>form</code></p><ul><li><code>action</code>属性：标识表单提交的地址。</li><li><code>method</code>属性，表单数据的提交方式。<ol><li><code>get</code>方法</li><li><code>post</code>方法 </li></ol></li><li><code>input</code>元素：输入框。<ol><li><code>type</code>类型属性： text （文本框） ，password（密码框），radio（单选框），checkbox（复选框），button（普通按钮），file（文件上传）<strong>可限定文件类型</strong>！！<pre><code>- 复选框![Alt text](./1511432806144.png)- 复选框中加上`checked`表示默认选中，`disabled`禁制使用。- 普通按钮![Alt text](./1511432786801.png)- 重置按钮![Alt text](./1511432902424.png)- 提交按钮![Alt text](./1511433177191.png)- 提交数据包括：name属性的关键字和value属性的值，两者组成的键值对。</code></pre></li><li><code>lable</code>绑定文本到目标ID的选择框上。可实现<strong>文字点击选中效果</strong>！<pre><code>- ![Alt text](./1511432600393.png)</code></pre></li><li><code>placeholder</code>框内提示信息</li></ol></li><li><code>selection</code>下拉选框<ol><li><code>option</code>下拉选项。加上<code>selected</code>则表示此项默认选中。</li></ol></li><li><code>textarea</code>文本区域 </li><li><code>fieldset</code>组合表单控件，是块级元素。<ol><li><code>legend</code>此表单区块的标题</li></ol></li><li></li><li><p>PS：<code>outline：none</code>去掉默认的焦点元素框，默认是蓝色。</p></li></ul><p>####focus伪类，常用于表单元素</p><ul><li>如：<img src="./1511442146588.png" alt="Alt text"><br><img src="./1511442186875.png" alt="Alt text"></li></ul><p>####表格<code>table</code></p><ul><li>表格的一般组成<img src="./1511443794429.png" alt="Alt text"><img src="./1511443884334.png" alt="Alt text"><br>包括<code>thead</code>，<code>tbody</code>，<code>tfoot</code>；</li><li><strong>表格具备对齐属性：即改变某一行或者某一列甚至某个格子时，其他元素会行列对齐次</strong>。</li><li><code>table</code>的<code>border</code>属性只对最外层加边框。</li><li><p><strong>单元格合并</strong></p><ol><li><code>colspan=？</code>不同列合并，值表示合并的个数，多的单元格会被挤压。</li><li><code>rowspan=？</code>不同行合并，值表示合并的个数，多的单元格会被挤压。</li></ol></li><li><p>单元格默认类型为<code>table-cell</code>，<code>td，tr，th</code>不支持<code>margin</code>属性，且有默认的<code>padding=1</code>。</p></li><li>边框间距<code>border-spacing</code>：<br>加给<code>table</code>标签，可以控制边框距离，默认两个值，分别控制<strong>x，y</strong>。</li><li>边框合并<code>border-collapse：collapse</code></li></ul><hr><p>2017.11.24</p><p>####<code>iframe</code>框架<br>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p><ul><li><img src="./1511526913597.png" alt="Alt text"></li><li>通过对<code>a</code>标签的<code>target</code>属性绑定<code>iframe</code>的name值，可实现链接跳转的绑定，及对应显示。即点击a标签对应文字，框架内可显示京东的首页！</li></ul><p>####css继承总结</p><ul><li>默认继承的有：<code>color、font、text-align、text-indent、letter-spacing、word-spacing、list-style</code></li><li>a标签的颜色值不继承父级的<code>color</code>，有自己的默认颜色。</li><li>可以使用<code>inherit</code>来明确继承父级相应的属性值。<br>####css重用<br>通过给元素添加具有<strong>固定样式的类</strong>，达到样式的高效重复使用的目的。<br>★★★★★<br><strong>选项卡图标！！！</strong></li><li>用法如下：<img src="./1511529464616.png" alt="Alt text"><br>####css书写顺序</li></ul><p>第一位：关乎元素类型的</p><ol><li>display</li><li>positon</li><li>float<br>第二位：元素自身的特性属性<ol><li>width</li><li>height</li><li>border</li><li>margin</li><li>padding<br>第三位：其他属性</li><li>text</li><li>font</li><li>background<br>第四位：css3的属性</li></ol></li></ol><p>####浏览器前缀<br>谷歌：<code>-webkit-</code><br>火狐：<code>-moz-</code><br>欧朋：<code>-o-</code><br>IE：<code>-ms-</code></p><p>####<code>swiper</code>轮播插件</p><p>####阿里图标<br>是一种字体图标，不会因为放大缩小而模糊。<br>一、单色图标<br>兼容IE8+以上所有现代浏览器。<br>不支持彩色图标！<br>但可以通过CSS进行后期修改。<br><strong>通过引入css文件，给i标签加特定的类名实现</strong><br>二、多色图标<br>性能较差，兼容性较差，不推荐使用。<code>通过引入JS文件，些svg代码块实现</code></p><hr><p>@(培训)[标签1, 标签2, 标签3]</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;html基础笔记&quot;&gt;&lt;a href=&quot;#html基础笔记&quot; class=&quot;headerlink&quot; title=&quot;html基础笔记&quot;&gt;&lt;/a&gt;html基础笔记&lt;/h1&gt;&lt;h3 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://tguide.qq.com/main/base.htm#css-list01&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;命名规范&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;HTML是什么？&quot;&gt;&lt;a href=&quot;#HTML是什么？&quot; class=&quot;headerlink&quot; title=&quot;HTML是什么？&quot;&gt;&lt;/a&gt;HTML是什么？&lt;/h3&gt;&lt;p&gt;◾超文本标记语言（Hypertext Markup Language，HTML）通过标签语言来标记要显示的网页中的各个部分。一套规则，浏览器认识的规则。
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
